package homework3;

import java.util.Arrays;

public class Homework {
    public static void main(String[] args) {
/*
1.Как оценивается эффективность алгоритма?
2.Что учитывается при асимптотическом анализе?
3.Перечислите основные правила асимптотического анализа
4.Какие порядки роста асимтотических функций знаете?


1. Эффективность алгоритма оценивается по времени его выполнения и его сложности
    - Временная сложность оперделяет сколько времени займет выполнение алгоритма согласно входным данным и указывает
        на приблезительное кл-во операций которые выполнит алгоритм. Чем меньше временная сложность
        тем эффективнее алгоритм.
    - Пространственная сложность определяет сколько потребудется памяти для выполнения алгоритма в зависимости от
        входных данныхю.
2. В асимптотическом анализе учитывается поведение алгоритма при увеличении входных данных. При составлении сложности
    мы интресуемся тем, как алгоритм ведет себя на оченьбольших данных и как он растет при их увелечении.
3. - Мы можем игнорировать меньшие данные в выражениях и сосредочится на более больших, потому что именно они определяют
      сложность алгоритма
   - Нужно учитывать кл-во операций и вызовов
4. - Константный O(1)
   - Логарифмичесекий О(n log)
   - Квадратный О(n^2)
   - Экспонентный О(2^n)


    Честно пока сложновато-то определять асимптотику алгоритма, я пропущу это задание, но в будущем буду больше времени
        уделять этому моменту. Не хочу просто бездумно списывать, не понимая содержания)
 */

        int[] arr = {3, 6, 1, 25, 11, 2, 39, 77};
        int temp;

        for (int i = 0; i < arr.length; i++) {          // пробегаемся по массиву
            // сравниваем элементы - arr.length - i -1 - нам незачем сравнивать последний элемент, т.к он уже самый большой в нашей сортировке
            for (int j = 0; j < arr.length - i - 1; j++) {
                if (arr[j] > arr[j + 1]) {
                    temp = arr[j + 1];
                    arr[j + 1] = arr[j];
                    arr[j] = temp;
                }
            }
        }
        System.out.print(Arrays.toString(arr));


    }
}
